
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Admin
 */
public class MainPage extends javax.swing.JFrame {

    /**
     * Creates new form MainPage
     */
    public MainPage() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        Branch = new javax.swing.JButton();
        Employee = new javax.swing.JButton();
        Customer = new javax.swing.JButton();
        Loan = new javax.swing.JButton();
        Saving = new javax.swing.JButton();
        Payment = new javax.swing.JButton();
        tableCombo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        CommandMode = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Branch.setText("Branch");
        Branch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BranchActionPerformed(evt);
            }
        });

        Employee.setText("Employee");
        Employee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmployeeActionPerformed(evt);
            }
        });

        Customer.setText("Customer");
        Customer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerActionPerformed(evt);
            }
        });

        Loan.setText("Loan");
        Loan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoanActionPerformed(evt);
            }
        });

        Saving.setText("Saving");
        Saving.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SavingActionPerformed(evt);
            }
        });

        Payment.setText("Payment");
        Payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaymentActionPerformed(evt);
            }
        });

        tableCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Branch", "Employee", "Customer", "Loan", "Saving", "Payment" }));
        tableCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableComboActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        CommandMode.setText("Command Mode");
        CommandMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CommandModeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Saving, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(Payment, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(Loan, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(Customer, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(Employee, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(Branch, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(CommandMode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tableCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tableCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CommandMode))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Branch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Employee)
                        .addGap(50, 50, 50)
                        .addComponent(Customer)
                        .addGap(46, 46, 46)
                        .addComponent(Loan)
                        .addGap(42, 42, 42)
                        .addComponent(Saving)
                        .addGap(40, 40, 40)
                        .addComponent(Payment))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableComboActionPerformed
        if (tableCombo.getSelectedIndex() == 0) {
            try {
                // loading mysql driver class
                Class.forName("com.mysql.cj.jdbc.Driver");
                // creating connection with database
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/banking", "root", "admin");
                // creating statement object
                Statement st = con.createStatement();

                // Write your query
                // String query = "select book_details.book_id, book_details.title, 
                //                  author.name from book_details inner join author on "
                //                  + "book_details.author_author_id = author.author_id";
                // Get your query from input section like TextArea
                String query = "select * from banking.branch";

                //Create a resultset object and store the return object of query execution
                ResultSet rs = st.executeQuery(query);

                //Retrieving the ResultSetMetaData object
                ResultSetMetaData rsmd = rs.getMetaData();

                //getting the column type
                int column_count = rsmd.getColumnCount();
                System.out.println(column_count);

                // Creating a default table object and typecast out JTable into it            
                DefaultTableModel defaultTableModel = (DefaultTableModel) jTable2.getModel();

                // Initialy set row and column size as 0
                defaultTableModel.setColumnCount(0);
                defaultTableModel.setRowCount(0);

                // Adding colums according to metadata information
                for (int j = 0; j < column_count;) {
                    //// Adding colum name according to metadata information
                    defaultTableModel.addColumn(rsmd.getColumnName(++j));

                    System.out.println(rsmd.getColumnName(j));
                }

                // Traverse result set object to end
                while (rs.next()) {
                    // Considering maximun column size is 100
                    String tablearray[] = new String[100];

                    //Selecting data from each column of ResultSet table
                    for (int i = 1, k = 0; i <= column_count;) {
                        // Assigning data to each column into JTable
                        tablearray[k++] = rs.getString(i++);

                        System.out.println(tablearray[k]);
                    }

                    // Add the column information as a row into default table
                    defaultTableModel.addRow(tablearray);

// If you want to print information on console               
//                int i=1;
//                String book_id = rs.getString(i++);
//                String author = rs.getString(i++);
//                String title = rs.getString(i++);
//                String isbn = rs.getString(i++);
//                                              
//                String tablearray[] = {book_id,author,title,isbn};
//                  
                }
                con.close();
            } catch (ClassNotFoundException | SQLException e) {
                System.out.println(e);
            }
        }

        if (tableCombo.getSelectedIndex() == 1) {
            try {
                // loading mysql driver class
                Class.forName("com.mysql.cj.jdbc.Driver");
                // creating connection with database
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/banking", "root", "admin");
                // creating statement object
                Statement st = con.createStatement();

                // Write your query
                // String query = "select book_details.book_id, book_details.title, 
                //                  author.name from book_details inner join author on "
                //                  + "book_details.author_author_id = author.author_id";
                // Get your query from input section like TextArea
                String query = "select * from banking.employee";

                //Create a resultset object and store the return object of query execution
                ResultSet rs = st.executeQuery(query);

                //Retrieving the ResultSetMetaData object
                ResultSetMetaData rsmd = rs.getMetaData();

                //getting the column type
                int column_count = rsmd.getColumnCount();
                System.out.println(column_count);

                // Creating a default table object and typecast out JTable into it            
                DefaultTableModel defaultTableModel = (DefaultTableModel) jTable2.getModel();

                // Initialy set row and column size as 0
                defaultTableModel.setColumnCount(0);
                defaultTableModel.setRowCount(0);

                // Adding colums according to metadata information
                for (int j = 0; j < column_count;) {
                    //// Adding colum name according to metadata information
                    defaultTableModel.addColumn(rsmd.getColumnName(++j));

                    System.out.println(rsmd.getColumnName(j));
                }

                // Traverse result set object to end
                while (rs.next()) {
                    // Considering maximun column size is 100
                    String tablearray[] = new String[100];

                    //Selecting data from each column of ResultSet table
                    for (int i = 1, k = 0; i <= column_count;) {
                        // Assigning data to each column into JTable
                        tablearray[k++] = rs.getString(i++);

                        System.out.println(tablearray[k]);
                    }

                    // Add the column information as a row into default table
                    defaultTableModel.addRow(tablearray);

// If you want to print information on console               
//                int i=1;
//                String book_id = rs.getString(i++);
//                String author = rs.getString(i++);
//                String title = rs.getString(i++);
//                String isbn = rs.getString(i++);
//                                              
//                String tablearray[] = {book_id,author,title,isbn};
//                  
                }
                con.close();
            } catch (ClassNotFoundException | SQLException e) {
                System.out.println(e);
            }
        }

        if (tableCombo.getSelectedIndex() == 2) {
            try {
                // loading mysql driver class
                Class.forName("com.mysql.cj.jdbc.Driver");
                // creating connection with database
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/banking", "root", "admin");
                // creating statement object
                Statement st = con.createStatement();

                // Write your query
                // String query = "select book_details.book_id, book_details.title, 
                //                  author.name from book_details inner join author on "
                //                  + "book_details.author_author_id = author.author_id";
                // Get your query from input section like TextArea
                String query = "select * from banking.customer";

                //Create a resultset object and store the return object of query execution
                ResultSet rs = st.executeQuery(query);

                //Retrieving the ResultSetMetaData object
                ResultSetMetaData rsmd = rs.getMetaData();

                //getting the column type
                int column_count = rsmd.getColumnCount();
                System.out.println(column_count);

                // Creating a default table object and typecast out JTable into it            
                DefaultTableModel defaultTableModel = (DefaultTableModel) jTable2.getModel();

                // Initialy set row and column size as 0
                defaultTableModel.setColumnCount(0);
                defaultTableModel.setRowCount(0);

                // Adding colums according to metadata information
                for (int j = 0; j < column_count;) {
                    //// Adding colum name according to metadata information
                    defaultTableModel.addColumn(rsmd.getColumnName(++j));

                    System.out.println(rsmd.getColumnName(j));
                }

                // Traverse result set object to end
                while (rs.next()) {
                    // Considering maximun column size is 100
                    String tablearray[] = new String[100];

                    //Selecting data from each column of ResultSet table
                    for (int i = 1, k = 0; i <= column_count;) {
                        // Assigning data to each column into JTable
                        tablearray[k++] = rs.getString(i++);

                        System.out.println(tablearray[k]);
                    }

                    // Add the column information as a row into default table
                    defaultTableModel.addRow(tablearray);

// If you want to print information on console               
//                int i=1;
//                String book_id = rs.getString(i++);
//                String author = rs.getString(i++);
//                String title = rs.getString(i++);
//                String isbn = rs.getString(i++);
//                                              
//                String tablearray[] = {book_id,author,title,isbn};
//                  
                }
                con.close();
            } catch (ClassNotFoundException | SQLException e) {
                System.out.println(e);
            }
        }

        if (tableCombo.getSelectedIndex() == 3) {
            try {
                // loading mysql driver class
                Class.forName("com.mysql.cj.jdbc.Driver");
                // creating connection with database
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/banking", "root", "admin");
                // creating statement object
                Statement st = con.createStatement();

                // Write your query
                // String query = "select book_details.book_id, book_details.title, 
                //                  author.name from book_details inner join author on "
                //                  + "book_details.author_author_id = author.author_id";
                // Get your query from input section like TextArea
                String query = "select * from banking.loan";

                //Create a resultset object and store the return object of query execution
                ResultSet rs = st.executeQuery(query);

                //Retrieving the ResultSetMetaData object
                ResultSetMetaData rsmd = rs.getMetaData();

                //getting the column type
                int column_count = rsmd.getColumnCount();
                System.out.println(column_count);

                // Creating a default table object and typecast out JTable into it            
                DefaultTableModel defaultTableModel = (DefaultTableModel) jTable2.getModel();

                // Initialy set row and column size as 0
                defaultTableModel.setColumnCount(0);
                defaultTableModel.setRowCount(0);

                // Adding colums according to metadata information
                for (int j = 0; j < column_count;) {
                    //// Adding colum name according to metadata information
                    defaultTableModel.addColumn(rsmd.getColumnName(++j));

                    System.out.println(rsmd.getColumnName(j));
                }

                // Traverse result set object to end
                while (rs.next()) {
                    // Considering maximun column size is 100
                    String tablearray[] = new String[100];

                    //Selecting data from each column of ResultSet table
                    for (int i = 1, k = 0; i <= column_count;) {
                        // Assigning data to each column into JTable
                        tablearray[k++] = rs.getString(i++);

                        System.out.println(tablearray[k]);
                    }

                    // Add the column information as a row into default table
                    defaultTableModel.addRow(tablearray);

// If you want to print information on console               
//                int i=1;
//                String book_id = rs.getString(i++);
//                String author = rs.getString(i++);
//                String title = rs.getString(i++);
//                String isbn = rs.getString(i++);
//                                              
//                String tablearray[] = {book_id,author,title,isbn};
//                  
                }
                con.close();
            } catch (ClassNotFoundException | SQLException e) {
                System.out.println(e);
            }
        }

        if (tableCombo.getSelectedIndex() == 4) {
            try {
                // loading mysql driver class
                Class.forName("com.mysql.cj.jdbc.Driver");
                // creating connection with database
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/banking", "root", "admin");
                // creating statement object
                Statement st = con.createStatement();

                // Write your query
                // String query = "select book_details.book_id, book_details.title, 
                //                  author.name from book_details inner join author on "
                //                  + "book_details.author_author_id = author.author_id";
                // Get your query from input section like TextArea
                String query = "select * from banking.savings_account";

                //Create a resultset object and store the return object of query execution
                ResultSet rs = st.executeQuery(query);

                //Retrieving the ResultSetMetaData object
                ResultSetMetaData rsmd = rs.getMetaData();

                //getting the column type
                int column_count = rsmd.getColumnCount();
                System.out.println(column_count);

                // Creating a default table object and typecast out JTable into it            
                DefaultTableModel defaultTableModel = (DefaultTableModel) jTable2.getModel();

                // Initialy set row and column size as 0
                defaultTableModel.setColumnCount(0);
                defaultTableModel.setRowCount(0);

                // Adding colums according to metadata information
                for (int j = 0; j < column_count;) {
                    //// Adding colum name according to metadata information
                    defaultTableModel.addColumn(rsmd.getColumnName(++j));

                    System.out.println(rsmd.getColumnName(j));
                }

                // Traverse result set object to end
                while (rs.next()) {
                    // Considering maximun column size is 100
                    String tablearray[] = new String[100];

                    //Selecting data from each column of ResultSet table
                    for (int i = 1, k = 0; i <= column_count;) {
                        // Assigning data to each column into JTable
                        tablearray[k++] = rs.getString(i++);

                        System.out.println(tablearray[k]);
                    }

                    // Add the column information as a row into default table
                    defaultTableModel.addRow(tablearray);

// If you want to print information on console               
//                int i=1;
//                String book_id = rs.getString(i++);
//                String author = rs.getString(i++);
//                String title = rs.getString(i++);
//                String isbn = rs.getString(i++);
//                                              
//                String tablearray[] = {book_id,author,title,isbn};
//                  
                }
                con.close();
            } catch (ClassNotFoundException | SQLException e) {
                System.out.println(e);
            }
        }

        if (tableCombo.getSelectedIndex() == 5) {
            try {
                // loading mysql driver class
                Class.forName("com.mysql.cj.jdbc.Driver");
                // creating connection with database
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/banking", "root", "admin");
                // creating statement object
                Statement st = con.createStatement();

                // Write your query
                // String query = "select book_details.book_id, book_details.title, 
                //                  author.name from book_details inner join author on "
                //                  + "book_details.author_author_id = author.author_id";
                // Get your query from input section like TextArea
                String query = "select * from banking.payment";

                //Create a resultset object and store the return object of query execution
                ResultSet rs = st.executeQuery(query);

                //Retrieving the ResultSetMetaData object
                ResultSetMetaData rsmd = rs.getMetaData();

                //getting the column type
                int column_count = rsmd.getColumnCount();
                System.out.println(column_count);

                // Creating a default table object and typecast out JTable into it            
                DefaultTableModel defaultTableModel = (DefaultTableModel) jTable2.getModel();

                // Initialy set row and column size as 0
                defaultTableModel.setColumnCount(0);
                defaultTableModel.setRowCount(0);

                // Adding colums according to metadata information
                for (int j = 0; j < column_count;) {
                    //// Adding colum name according to metadata information
                    defaultTableModel.addColumn(rsmd.getColumnName(++j));

                    System.out.println(rsmd.getColumnName(j));
                }

                // Traverse result set object to end
                while (rs.next()) {
                    // Considering maximun column size is 100
                    String tablearray[] = new String[100];

                    //Selecting data from each column of ResultSet table
                    for (int i = 1, k = 0; i <= column_count;) {
                        // Assigning data to each column into JTable
                        tablearray[k++] = rs.getString(i++);

                        System.out.println(tablearray[k]);
                    }

                    // Add the column information as a row into default table
                    defaultTableModel.addRow(tablearray);

// If you want to print information on console               
//                int i=1;
//                String book_id = rs.getString(i++);
//                String author = rs.getString(i++);
//                String title = rs.getString(i++);
//                String isbn = rs.getString(i++);
//                                              
//                String tablearray[] = {book_id,author,title,isbn};
//                  
                }
                con.close();
            } catch (ClassNotFoundException | SQLException e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_tableComboActionPerformed

    private void BranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BranchActionPerformed

        Branch branch = new Branch();
        branch.setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_BranchActionPerformed

    private void EmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmployeeActionPerformed
        Employee employ = new Employee();
        employ.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_EmployeeActionPerformed

    private void CustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerActionPerformed
        Customer customer = new Customer();
        customer.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_CustomerActionPerformed

    private void LoanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoanActionPerformed
        Loan loan = new Loan();
        loan.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_LoanActionPerformed

    private void SavingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SavingActionPerformed
        Saving save = new Saving();
        save.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_SavingActionPerformed

    private void PaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaymentActionPerformed
        Payment payment = new Payment();
        payment.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_PaymentActionPerformed

    private void CommandModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CommandModeActionPerformed
        CommandMode cM = new CommandMode();
        this.setVisible(false);
        cM.setVisible(true);
    }//GEN-LAST:event_CommandModeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Branch;
    private javax.swing.JButton CommandMode;
    private javax.swing.JButton Customer;
    private javax.swing.JButton Employee;
    private javax.swing.JButton Loan;
    private javax.swing.JButton Payment;
    private javax.swing.JButton Saving;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JComboBox<String> tableCombo;
    // End of variables declaration//GEN-END:variables
}
